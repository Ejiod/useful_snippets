

```sql
CREATE OR REPLACE PROCEDURE clean_name(tablename STRING)
RETURNS STRING
LANGUAGE PYTHON
RUNTIME_VERSION = '3.8'
PACKAGES = ('snowflake-snowpark-python', 'pandas')
HANDLER = 'clean_name_procedure'
AS
$$
import re
import pandas as pd
from snowflake.snowpark.session import Session

def clean_name_procedure(session: Session, tablename: str) -> str:
    name_patterns = {
        'first_name': r'^(?:first[_\s]?(?:name|nm)|fore[_\s]?(?:name|nm)|given[_\s]?(?:name|nm))$',
        'last_name': r'^(?:last[_\s]?(?:name|nm)|sur[_\s]?(?:name|nm)|family[_\s]?(?:name|nm))$',
        'middle_name': r'^middle[_\s]?(?:name|nm)$'
    }
    
    # Fetch the table into a pandas DataFrame
    df = session.table(tablename).to_pandas()
    
    # Function to clean and format name fields
    def clean_name(name):
        if pd.isna(name):
            return name
        # Strip leading and trailing spaces, and convert to title case
        return str(name).strip().title()
    
    # Rename columns based on patterns and clean name fields
    rename_mappings = {}
    for column in df.columns:
        for name_type, pattern in name_patterns.items():
            if re.match(pattern, column, re.IGNORECASE):
                rename_mappings[column] = name_type
                df[column] = df[column].apply(clean_name)
    
    # Apply renaming
    df.rename(columns=rename_mappings, inplace=True)
    
    # Clean columns with "Title" in their name by making their values title case
    for column in df.columns:
        if 'title' in column.lower():
            df[column] = df[column].apply(lambda x: x.title() if isinstance(x, str) else x)
    
    # Write the cleaned DataFrame back to the Snowflake table
    session.write_pandas(df, tablename, overwrite=True)
    
    return "Table cleaned, columns renamed, and names formatted successfully."
$$;

