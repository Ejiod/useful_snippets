CREATE OR REPLACE PROCEDURE clean_table_columns(table_name STRING)
RETURNS STRING
LANGUAGE PYTHON
RUNTIME_VERSION = '3.8'
PACKAGES = ('snowflake-snowpark-python', 're')
HANDLER = 'clean_columns'
AS
$$
import snowflake.snowpark as snowpark
from snowflake.snowpark.functions import col, udf
import re

def clean_columns(session: snowpark.Session, table_name: str) -> str:
    df = session.table(table_name)
    columns = df.columns
    
    # Define regex patterns for possible column names
    column_patterns = {
        'firstname': r'first[_\-\s]?name|first[_\-\s]?nm|forname|given[_\-\s]?name',
        'lastname': r'last[_\-\s]?name|last[_\-\s]?nm|surname',
        'middlename': r'middle[_\-\s]?name|middle[_\-\s]?nm',
        'title': r'title|job[_\-\s]?title|position[_\-\s]?title'
    }

    # Define a UDF to convert strings to title case
    @udf
    def to_title_case(value: str) -> str:
        if value is not None:
            return value.strip().title()
        return value

    # Function to find and clean columns based on regex patterns
    def clean_and_rename(df, target_column, pattern):
        for col_name in columns:
            if re.match(pattern, col_name, re.IGNORECASE):
                df = df.withColumn(target_column, to_title_case(col(col_name)))
                break
        return df
    
    # Clean and format the columns dynamically
    for target_column, pattern in column_patterns.items():
        df = clean_and_rename(df, target_column, pattern)
    
    # Write the cleaned data back to the table
    cleaned_table_name = f"{table_name}_cleaned"
    df.write.mode('overwrite').save_as_table(cleaned_table_name)
    
    return f"Table {table_name} cleaned and formatted successfully into {cleaned_table_name}."

$$;