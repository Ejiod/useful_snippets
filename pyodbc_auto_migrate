CREATE OR REPLACE PROCEDURE clean_name(tablename STRING)
RETURNS STRING
LANGUAGE PYTHON
RUNTIME_VERSION = '3.8'
PACKAGES = ('snowflake-snowpark-python')
HANDLER = 'clean_name_procedure'
AS
$$
import re
import snowflake.snowpark as snowpark

def clean_name_procedure(session, tablename: str) -> str:
    name_patterns = {
        'first_name': r'^(?:first[_\s]?(?:name|nm)|fore[_\s]?(?:name|nm)|given[_\s]?(?:name|nm))$',
        'last_name': r'^(?:last[_\s]?(?:name|nm)|sur[_\s]?(?:name|nm)|family[_\s]?(?:name|nm))$',
        'middle_name': r'^middle[_\s]?(?:name|nm)$'
    }
    
    df = session.table(tablename)
    column_names = df.columns

    rename_mappings = {}

    for column in column_names:
        for name_type, pattern in name_patterns.items():
            if re.match(pattern, column, re.IGNORECASE):
                rename_mappings[column] = name_type

    for old_name, new_name in rename_mappings.items():
        df = df.with_column_renamed(old_name, new_name)

    df.write.mode("overwrite").save_as_table(tablename)
    
    return "Table cleaned and columns renamed successfully."

$$;

CREATE OR REPLACE PROCEDURE clean_name(tablename STRING)
RETURNS STRING
LANGUAGE PYTHON
RUNTIME_VERSION = '3.8'
PACKAGES = ('pandas', 'snowflake-connector-python')
HANDLER = 'clean_name_procedure'
AS
$$
import pandas as pd
import re
import snowflake.connector
from snowflake.connector.pandas_tools import write_pandas

def clean_name_procedure(session, tablename: str) -> str:
    # Define regex patterns for name columns
    name_patterns = {
        'first_name': r'^(?:first[_\s]?(?:name|nm)|fore[_\s]?(?:name|nm)|given[_\s]?(?:name|nm))$',
        'last_name': r'^(?:last[_\s]?(?:name|nm)|sur[_\s]?(?:name|nm)|family[_\s]?(?:name|nm))$',
        'middle_name': r'^middle[_\s]?(?:name|nm)$'
    }

    # Fetch the table into a pandas DataFrame
    query = f'SELECT * FROM {tablename}'
    df = session.sql(query).to_pandas()

    # Rename columns based on patterns
    rename_mappings = {}
    for column in df.columns:
        for name_type, pattern in name_patterns.items():
            if re.match(pattern, column, re.IGNORECASE):
                rename_mappings[column] = name_type

    # Apply renaming
    df.rename(columns=rename_mappings, inplace=True)

    # Write the cleaned DataFrame back to the Snowflake table
    session.write_pandas(df, tablename, overwrite=True)
    
    return "Table cleaned and columns renamed successfully."
$$;

