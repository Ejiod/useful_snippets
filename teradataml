import teradataml as tdml


# Connect to database_name_1 with LDAP authentication
tdml.create_context(host=db1_host, username=db1_username, password=db1_password, database=db1_database,
                    method='ldap', ldap_host=ldap_host, ldap_username=ldap_username, ldap_password=ldap_password)

# Connect to database_name_2 with LDAP authentication
tdml.create_context(host=db2_host, username=db2_username, password=db2_password, database=db2_database,
                    method='ldap', ldap_host=ldap_host, ldap_username=ldap_username, ldap_password=ldap_password)

# Iterate over table mappings and copy tables
for mapping in table_mappings:
    # Read the source table
    source_table = tdml.DataFrame.from_table(f"{mapping['database_name_1']}.{mapping['source_table']}")

    # Copy the source table to the target table
    tdml.copy_to_sql(source_table, f"{mapping['database_name_2']}.{mapping['target_table']}", if_exists="replace")

# Close the connections
tdml.remove_context()




source_context = tdml.create_context(host=source_host, username=source_username, password=source_password,
                                    database=source_database, method='ldap', ldap_host=ldap_host,
                                    ldap_username=ldap_username, ldap_password=ldap_password)

# Convert DataFrames to Pandas DataFrames
pandas_data_frames = []
for table_name in table_list:
    df = tdml.DataFrame.from_table(table_name)
    pandas_data_frames.append(df.to_pandas())

# Close the source connection
tdml.remove_context(source_context)

# Establish connection to the target database with LDAP authentication
target_context = tdml.create_context(host=target_host, username=target_username, password=target_password,
                                    database=target_database, method='ldap', ldap_host=ldap_host,
                                    ldap_username=ldap_username, ldap_password=ldap_password)

# Iterate over the Pandas DataFrames and copy to target table
for i, df in enumerate(pandas_data_frames):
    table_name = table_list[i]
    tdml.copy_to_sql(tdml.DataFrame(df), table_name, if_exists="replace")

# Close the target connection
tdml.remove_context(target_context)





-----vERSION 2
pandas_data_frames = []
for table_name in table_list:
    table_name = ast.literal_eval(table_name)
    df = tdml.DataFrame.from_table(table_name)
    pandas_data_frames.append(df.to_pandas())

# Close the source connection
tdml.remove_context(source_context)

# Establish connection to the target database with LDAP authentication
target_context = tdml.create_context(host=target_host, username=target_username, password=target_password,
                                    database=target_database, method='ldap', ldap_host=ldap_host,
                                    ldap_username=ldap_username, ldap_password=ldap_password)

# Iterate over the Pandas DataFrames and copy to target table
for i, df in enumerate(pandas_data_frames):
    table_name = table_list[i]
    tdml.copy_to_sql(tdml.DataFrame(df), table_name, if_exists="replace")



--RESET INDEX
pandas_data_frames = []
for table_name in table_list:
    df = tdml.DataFrame.from_table(table_name)
    df = df.to_pandas()
    
    # Reset index for each level of the multi-index
    for level in range(df.columns.nlevels):
        df = df.reset_index(level=level)
    
    pandas_data_frames.append(df)


pandas_data_frames = []
for table_name in table_list:
    df = tdml.DataFrame.from_table(table_name)
    column_names = df.columns.tolist()  # Get the column names
    selected_df = df[column_names]  # Select all columns explicitly
    pandas_data_frames.append(selected_df.to_pandas())

