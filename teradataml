import teradataml as tdml


# Connect to database_name_1 with LDAP authentication
tdml.create_context(host=db1_host, username=db1_username, password=db1_password, database=db1_database,
                    method='ldap', ldap_host=ldap_host, ldap_username=ldap_username, ldap_password=ldap_password)

# Connect to database_name_2 with LDAP authentication
tdml.create_context(host=db2_host, username=db2_username, password=db2_password, database=db2_database,
                    method='ldap', ldap_host=ldap_host, ldap_username=ldap_username, ldap_password=ldap_password)

# Iterate over table mappings and copy tables
for mapping in table_mappings:
    # Read the source table
    source_table = tdml.DataFrame.from_table(f"{mapping['database_name_1']}.{mapping['source_table']}")

    # Copy the source table to the target table
    tdml.copy_to_sql(source_table, f"{mapping['database_name_2']}.{mapping['target_table']}", if_exists="replace")

# Close the connections
tdml.remove_context()




source_context = tdml.create_context(host=source_host, username=source_username, password=source_password,
                                    database=source_database, method='ldap', ldap_host=ldap_host,
                                    ldap_username=ldap_username, ldap_password=ldap_password)

# Convert DataFrames to Pandas DataFrames
pandas_data_frames = []
for table_name in table_list:
    df = tdml.DataFrame.from_table(table_name)
    pandas_data_frames.append(df.to_pandas())

# Close the source connection
tdml.remove_context(source_context)

# Establish connection to the target database with LDAP authentication
target_context = tdml.create_context(host=target_host, username=target_username, password=target_password,
                                    database=target_database, method='ldap', ldap_host=ldap_host,
                                    ldap_username=ldap_username, ldap_password=ldap_password)

# Iterate over the Pandas DataFrames and copy to target table
for i, df in enumerate(pandas_data_frames):
    table_name = table_list[i]
    tdml.copy_to_sql(tdml.DataFrame(df), table_name, if_exists="replace")

# Close the target connection
tdml.remove_context(target_context)





-----vERSION 2
pandas_data_frames = []
for table_name in table_list:
    table_name = ast.literal_eval(table_name)
    df = tdml.DataFrame.from_table(table_name)
    pandas_data_frames.append(df.to_pandas())

# Close the source connection
tdml.remove_context(source_context)

# Establish connection to the target database with LDAP authentication
target_context = tdml.create_context(host=target_host, username=target_username, password=target_password,
                                    database=target_database, method='ldap', ldap_host=ldap_host,
                                    ldap_username=ldap_username, ldap_password=ldap_password)

# Iterate over the Pandas DataFrames and copy to target table
for i, df in enumerate(pandas_data_frames):
    table_name = table_list[i]
    tdml.copy_to_sql(tdml.DataFrame(df), table_name, if_exists="replace")



--RESET INDEX
pandas_data_frames = []
for table_name in table_list:
    df = tdml.DataFrame.from_table(table_name)
    df = df.to_pandas()
    
    # Reset index for each level of the multi-index
    for level in range(df.columns.nlevels):
        df = df.reset_index(level=level)
    
    pandas_data_frames.append(df)


pandas_data_frames = []
for table_name in table_list:
    df = tdml.DataFrame.from_table(table_name)
    column_names = df.columns.tolist()  # Get the column names
    selected_df = df[column_names]  # Select all columns explicitly
    pandas_data_frames.append(selected_df.to_pandas())



















-----PYODBC


import pyodbc
import pandas as pd
from teradataml import create_context, copy_to_sql, DataFrame

# Replace these with your source database details
source_driver = "{your_driver}"
source_server = "your_server"
source_database = "your_database"
source_username = "your_username"
source_password = "your_password"

# Replace these with your target Teradata Vantage details
target_host = "target_host"
target_username = "target_username"
target_password = "target_password"

# Create a new connection to the source database
source_conn = pyodbc.connect(driver=source_driver, server=source_server, database=source_database, uid=source_username, pwd=source_password)

# A dictionary to hold the DataFrames for each source table
source_dfs = {}

# Iterate over each row in the DataFrame
for index, row in tables_df.iterrows():
    source_db = row['database_name_1']
    source_table = row['source_table']

    # Read the source table into a DataFrame and store it in the dictionary
    source_dfs[source_table] = pd.read_sql(f"SELECT * FROM {source_db}.{source_table}", source_conn)

# Close the source connection
source_conn.close()

# Create a new context for the target Teradata Vantage
create_context(host=target_host, username=target_username, password=target_password)

# Copy each DataFrame to the corresponding target table
for index, row in tables_df.iterrows():
    source_table = row['source_table']
    target_db = row['database_name_2']
    target_table = row['target_table'] if pd.notna(row['target_table']) else source_table

    # Get the DataFrame for this source table
    source_df = source_dfs[source_table]

    # Copy the DataFrame to the target table
    copy_to_sql(df=source_df, table_name=f"{target_db}.{target_table}", if_exists="replace")
