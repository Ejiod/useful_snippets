import cx_Oracle

# Function to get table metadata including additional attributes
def get_table_metadata(connection, table_name):
    cursor = connection.cursor()

    # Query to get table columns, their data types, lengths, nullability, comments, default values, and precision/scale
    query = f"""
    SELECT 
        cols.column_name,
        cols.data_type,
        cols.data_length,
        cols.data_precision,
        cols.data_scale,
        cols.nullable,
        cols.data_default,
        comments.comments,
        cons.constraint_type
    FROM 
        all_tab_columns cols
    LEFT JOIN 
        all_col_comments comments 
    ON 
        cols.table_name = comments.table_name 
        AND cols.column_name = comments.column_name
    LEFT JOIN (
        SELECT 
            cols.column_name, 
            cons.constraint_type
        FROM 
            all_cons_columns cols
        JOIN 
            all_constraints cons 
        ON 
            cols.constraint_name = cons.constraint_name 
            AND cons.constraint_type = 'P' -- Primary key
        WHERE 
            cols.table_name = :table_name
    ) cons
    ON 
        cols.column_name = cons.column_name
    WHERE 
        cols.table_name = :table_name
    """
    cursor.execute(query, [table_name.upper(), table_name.upper()])

    columns = cursor.fetchall()
    cursor.close()

    return columns

# Establish connection
dsn_tns = cx_Oracle.makedsn('host', 'port', service_name='service_name')
connection = cx_Oracle.connect(user='username', password='password', dsn=dsn_tns)

# Get metadata for a specific table
table_name = 'your_table_name'
metadata = get_table_metadata(connection, table_name)

# Print metadata
for column in metadata:
    print(f"Column: {column[0]}, Data Type: {column[1]}, Length: {column[2]}, Precision: {column[3]}, Scale: {column[4]}, Nullable: {column[5]}, Default: {column[6]}, Comment: {column[7]}, Primary Key: {column[8]}")

# Close the connection
connection.close()
