import pandas as pd
import pyodbc

# Assuming you've already defined target_conn and tables_df

# Create the error log table
try:
    error_log_table_query = """
    CREATE TABLE error_log (
        source_table VARCHAR(255),
        target_table VARCHAR(255),
        error_code INTEGER,
        error_message VARCHAR(MAX),
        timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    )
    """
    pd.read_sql(error_log_table_query, target_conn)
except Exception as e:
    print(f"Error creating error log table: {e}")

# Iterate over each row in the DataFrame for migration
for index, row in tables_df.iterrows():
    source_db = row['source_db']
    source_table = row['source_table']
    target_db = row['target_db']
    target_table = row.get('target_table', source_table)  # Assuming target table name is same as source if not provided

    # Create the target table by selecting data from the source table referenced via the foreign server
    try:
        query = f"CREATE TABLE {target_db}.{target_table} AS SELECT * FROM {source_db}.{source_table}@FServer"
        pd.read_sql(query, target_conn)
        print(f"Table {source_table} from {source_db} successfully migrated to {target_table} in {target_db}.")
    except pyodbc.Error as e:
        error_code = e.args[0]
        error_msg = str(e)
        print(f"Error migrating table {source_table} from {source_db} to {target_table} in {target_db}. Error Code: {error_code}, Error Message: {error_msg}")
        
        # Insert error details into the error log table
        insert_error_query = f"""
        INSERT INTO error_log (source_table, target_table, error_code, error_message)
        VALUES ('{source_table}', '{target_table}', {error_code}, '{error_msg}')
        """
        pd.read_sql(insert_error_query, target_conn)

# Close the target connection
target_conn.close()

