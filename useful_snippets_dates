CREATE OR REPLACE PROCEDURE clean_and_shift_addresses(table_name STRING)
RETURNS STRING
LANGUAGE PYTHON
RUNTIME_VERSION = '3.8'
PACKAGES = ('snowflake-snowpark-python', 'regex', 'pandas')
HANDLER = 'clean_and_shift'
AS
$$
from snowflake.snowpark import Session
from snowflake.snowpark.functions import col, trim, udf
from snowflake.snowpark.types import StringType, BooleanType
import regex as re
import pandas as pd

def clean_and_shift(session: Session, table_name: str) -> str:
    # UDFs for postcode validation and formatting (unchanged)
    @udf(return_type=BooleanType(), input_types=[StringType()])
    def is_valid_uk_postcode(postcode: str) -> bool:
        pattern = r'^[A-Z]{1,2}[0-9][A-Z0-9]? ?[0-9][A-Z]{2}$'
        if postcode is None:
            return False
        return re.match(pattern, postcode.strip().upper()) is not None

    @udf(return_type=StringType(), input_types=[StringType()])
    def format_uk_postcode(postcode: str) -> str:
        if postcode is None:
            return None
        postcode = postcode.strip().upper()
        postcode = postcode.replace(" ", "")
        if len(postcode) > 3:
            return postcode[:-3] + " " + postcode[-3:]
        return postcode

    # Get the table as a DataFrame
    df = session.table(table_name).to_pandas()

    # Replace 'null' and 'NULL' strings with actual None values
    df = df.replace({'null': None, 'NULL': None})

    # Strip spaces from all columns
    df = df.applymap(lambda x: x.strip() if isinstance(x, str) else x)

    # Dynamically identify address columns
    address_columns = [col for col in df.columns if re.match(r'(?i)add(?:ress)?[_\s]?line[_\s]?\d+', col)]
    address_columns.sort(key=lambda x: int(re.search(r'\d+', x).group()))

    if address_columns:
        # Shift address lines
        df[address_columns] = df[address_columns].apply(lambda row: pd.Series([x for x in row if pd.notnull(x) and x != ''] + [None]*(len(row) - len([x for x in row if pd.notnull(x) and x != '']))), axis=1)
    else:
        print("No address columns found matching the expected pattern.")

    # Identify postcode column
    postcode_column = next((col for col in df.columns if re.match(r'(?i)post[_\s]?code', col)), None)

    if postcode_column:
        # Format postcodes
        df[postcode_column] = df[postcode_column].apply(format_uk_postcode.func)

        # Validate postcodes
        df['IS_VALID_POSTCODE'] = df[postcode_column].apply(is_valid_uk_postcode.func)

        # Check if there are any invalid postcodes
        invalid_postcodes = df[~df['IS_VALID_POSTCODE']]

        if not invalid_postcodes.empty:
            error_message = "Invalid postcodes found for the following Customer_IDs:\n"
            for _, row in invalid_postcodes.iterrows():
                error_message += f"Customer_ID: {row['CUSTOMER_ID']}, Postcode: {row[postcode_column]}\n"
            raise ValueError(error_message)

        # If all postcodes are valid, remove the validation column
        df = df.drop(columns=['IS_VALID_POSTCODE'])
    else:
        print("No postcode column found matching the expected pattern.")

    # Convert the DataFrame back to a Snowflake DataFrame
    snowflake_df = session.create_dataframe(df)

    # Overwrite the original table with the cleaned and shifted data
    snowflake_df.write.mode("overwrite").save_as_table(table_name)

    return f"Successfully cleaned and processed address data in {table_name}"
$$;


call clean_and_shift_addresses('addresses')
